#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

from keep_alive import keep_alive
import telebot
import json
import re
import datetime
from telebot import types
import os

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
ADMIN_ID = 1465940524
bot = telebot.TeleBot(TOKEN)

# üìÅ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
VOTES_FILE = "votes.json"
REPORTS_FILE = "reports.json"

# ‚ùó –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∞–º–∞
SCAM_KEYWORDS = [
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "–±—ã—Å—Ç—Ä—ã–π –¥–æ—Ö–æ–¥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞",
    "100% –ø—Ä–∏–±—ã–ª—å", "–±–µ–∑ —Ä–∏—Å–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–∫–∞–º", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤–ª–æ–∂–µ–Ω–∏–µ", "–ª–µ–≥–∫–æ",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–æ—Ç–∑—ã–≤—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–∏–±—ã–ª—å", "–¥–æ—Ö–æ–¥", "–≤—ã–≤–æ–¥",
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "–∞–∫—Ü–∏—è", "–±–æ–Ω—É—Å", "–ø–ª–∞—Ç–∏—Ç", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–±–∏—Ç–∫–æ–∏–Ω",
    "–æ–±–º–∞–Ω", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø—Ä–∏–±—ã–ª—å —Å –Ω—É–ª—è", "—Å–¥–µ–ª–∞–π —Å–∞–º",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π", "—Ç–æ–∫–µ–Ω—ã", "—Ñ–æ—Ä–µ–∫—Å", "—Ä–æ–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å—É–ø–µ—Ä –¥–æ—Ö–æ–¥",
    "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "—Å–µ—Ç—å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–¥–æ—Ö–æ–¥ –¥–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
    "—Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞", "–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä", "–æ–±–µ—â–∞—é—Ç", "–±—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å",
    "—Ä–∞–±–æ—Ç–∞–π –¥–æ–º–∞", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥",
    "–¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞", "—Å—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å", "–ø–ª–∞—Ç–µ–∂–∏",
    "–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å 100%",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω—É–ª—è", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø—Ä–æ–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π", "—Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–≤—ã–ø–ª–∞—Ç—ã", "–ø—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", "–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—Ñ–µ–π–∫", "–æ–±–º–∞–Ω—É—Ç—å", "–≤–≤–æ–¥ –¥–µ–Ω–µ–≥", "–≤—ã–≤–æ–¥ –¥–µ–Ω–µ–≥", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞—Ñ–µ—Ä–∞", "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å—Ö–µ–º–∞", "–±—ã—Å—Ç—Ä—ã–π –æ–±–º–∞–Ω", "—Å–∫—Ä—ã—Ç—ã–π –æ–±–º–∞–Ω",
    "—Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ", "–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", "—Å–¥–µ–ª–∞–π –¥–µ–Ω—å–≥–∏",
    "–æ–±–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–∫–æ–Ω—Ç–∞–∫—Ç", "–ø–∏—à–∏—Ç–µ", "direct", 
    "–ª–∏—á–∫–∞", "telegram.me", "whatsapp", "viber", "–ª–∏—á–Ω–æ", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ", 
    "–≥–∞—Ä–∞–Ω—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", "–æ—Ç–∑—ã–≤—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", 
    "—Ä–µ—Ñ–µ—Ä–∞–ª", "–ø–∞—Ä—Ç–Ω–µ—Ä", "–±–æ–Ω—É—Å", "–∞–∫—Ü–∏—è", "—Å–∫–∏–¥–∫–∞", "–ø—Ä–æ–º–æ–∫–æ–¥", 
    "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", "–ø–æ—Å–ª–µ–¥–Ω–∏–π", "—É—Å–ø–µ–π",
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money",
    "scam", "fake", "fraud", "win", "winner", "lottery", "prize", "guaranteed",
    "profit", "cash", "deal", "limited offer", "click here", "subscribe",
    "easy money", "work from home", "passive income", "trading bot", "forex",
    "bitcoin", "token", "blockchain", "giveaway", "money back", "investment plan",
    "get rich", "income", "automatic profit", "high returns", "no risk",
    "double your money", "earnings", "make money", "quick cash", "fast profit",
    "financial freedom", "referral", "commission", "multilevel marketing",
    "pyramid scheme", "bonus code", "secret", "exclusive", "urgent", "risk free"
]

# =============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# =============================================
def load_json(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if os.path.exists(file):
        try:
            with open(file, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_json(file, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª"""
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def init_votes_for_channel(channel_username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
        save_json(VOTES_FILE, votes)
    return votes[channel_username]

def update_vote(channel_username, user_id, vote_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    votes = load_json(VOTES_FILE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) in votes[channel_username]["voters"]:
        return False

    if vote_type == "scam":
        votes[channel_username]["scam"] += 1
    else:
        votes[channel_username]["not_scam"] += 1
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    votes[channel_username]["voters"].append(str(user_id))
    
    save_json(VOTES_FILE, votes)
    return True

def get_vote_stats(channel_username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤"""
    votes = load_json(VOTES_FILE)
    if channel_username in votes:
        return votes[channel_username]["scam"], votes[channel_username]["not_scam"]
    return 0, 0

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∫–∞–º-–∫–ª—é—á–∏
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    for kw in SCAM_KEYWORDS:
        if kw in text:
            return True
    return False

# üìä –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ù–ê–õ–ê
def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        try:
            members_count = bot.get_chat_members_count(chat.id)
            if members_count < 50:
                warnings.append(f"–ú–∞–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({members_count})")
                scam_score += 1
        except:
            pass

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = chat.title
        if title and contains_scam_keywords(title):
            warnings.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
            scam_score += 2
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        try:
            description = chat.description
            if description and contains_scam_keywords(description):
                warnings.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏")
                scam_score += 2
        except:
            pass

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        try:
            invite_link = chat.invite_link
            if not invite_link:
                invite_link = bot.export_chat_invite_link(chat.id)
                
            if invite_link and ("free" in invite_link or "money" in invite_link or "earn" in invite_link):
                warnings.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                scam_score += 1
        except:
            pass

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
        try:
            if not chat.photo:
                warnings.append("–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏")
                scam_score += 1
        except:
            pass

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if not chat.pinned_message:
                warnings.append("–ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                scam_score += 1
        except:
            pass

    except:
        warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")

    return warnings, scam_score

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
def save_report(report):
    try:
        if not os.path.exists(REPORTS_FILE):
            with open(REPORTS_FILE, "w") as f:
                json.dump([], f)
                
        with open(REPORTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            
        data.append(report)
        
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except:
        pass

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    try:
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–∞–º–∞.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "@example\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "/status @–∫–∞–Ω–∞–ª - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞"
        )
    except:
        pass

# üìò –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def help_handler(message):
    try:
        help_text = (
            "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n"
            "üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª:\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example)\n\n"
            "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/status @–∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "‚ùó –í–∞–∂–Ω–æ:\n"
            "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        bot.reply_to(message, help_text)
    except:
        pass

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ @—Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    try:
        channel_tag = message.text.strip()
        
        if not re.match(r"^@[A-Za-z0-9_]{5,32}$", channel_tag):
            bot.reply_to(
                message,
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
            )
            return

        try:
            chat = bot.get_chat(channel_tag)
        except:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return

        warnings, scam_score = check_scam_factors(chat)
        
        channel_username = channel_tag[1:].lower()
        init_votes_for_channel(channel_username)
        scam_votes, not_scam_votes = get_vote_stats(channel_username)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_tag}",
            f"üìä –°–∫–∞–º-–∏–Ω–¥–µ–∫—Å: {scam_score}/10",
            f"üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫' if scam_score > 5 else '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫' if scam_score > 2 else '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'}"
        ]
        
        if warnings:
            report_lines.append("\n‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:")
            for i, warning in enumerate(warnings[:3], 1):
                report_lines.append(f"{i}. {warning}")
        
        report_text = "\n".join(report_lines)

        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton("üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
        btn_not_scam = types.InlineKeyboardButton("‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
        markup.add(btn_scam, btn_not_scam)
        
        bot.send_message(
            message.chat.id, 
            report_text,
            reply_markup=markup
        )

        save_report({
            "channel_tag": channel_tag,
            "date": datetime.datetime.now().isoformat(),
            "score": scam_score,
            "user": message.from_user.id
        })
        
    except:
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìä –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=["status"])
def status_handler(message):
    try:
        parts = message.text.split()
        if len(parts) < 2 or not parts[1].startswith("@"):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
            return

        channel_tag = parts[1]
        
        try:
            chat = bot.get_chat(channel_tag)
        except:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return

        warnings, scam_score = check_scam_factors(chat)
        scam_votes, not_scam_votes = get_vote_stats(channel_tag[1:].lower())

        msg = (
            f"üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞: {channel_tag}\n"
            f"üîñ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üìà –°–∫–∞–º-–∏–Ω–¥–µ–∫—Å: {scam_score}/10\n"
            f"üí¨ –†–∏—Å–∫: {'–í—ã—Å–æ–∫–∏–π' if scam_score > 5 else '–°—Ä–µ–¥–Ω–∏–π' if scam_score > 2 else '–ù–∏–∑–∫–∏–π'}\n"
            f"üë• –ì–æ–ª–æ—Å–∞: üö´ {scam_votes} | ‚úÖ {not_scam_votes}\n\n"
        )
        
        if warnings:
            msg += "‚ö† –ü—Ä–æ–±–ª–µ–º—ã:\n"
            for warning in warnings[:3]:
                msg += f"- {warning}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton("üö´ –°–∫–∞–º", callback_data=f"scam|{channel_tag[1:]}")
        btn_not_scam = types.InlineKeyboardButton("‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_tag[1:]}")
        markup.add(btn_scam, btn_not_scam)
        
        bot.reply_to(message, msg, reply_markup=markup)
        
    except:
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_vote(call):
    try:
        if '|' not in call.data:
            return
            
        vote_type, channel_username = call.data.split('|', 1)
        
        if vote_type not in ['scam', 'not_scam']:
            return

        success = update_vote(channel_username, call.from_user.id, vote_type)
        if not success:
            bot.answer_callback_query(call.id, "‚ùó –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª")
            return
            
        bot.answer_callback_query(call.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å!")
        
        scam_votes, not_scam_votes = get_vote_stats(channel_username)
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=call.message.text + f"\n\n‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞: üö´ {scam_votes} | ‚úÖ {not_scam_votes}",
                reply_markup=call.message.reply_markup
            )
        except:
            pass
        
    except:
        try:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞")
        except:
            pass

# üì§ –ö–æ–º–∞–Ω–¥–∞ /export (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(commands=["export"])
def export_handler(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏
        if os.path.exists(VOTES_FILE):
            with open(VOTES_FILE, "rb") as v:
                bot.send_document(message.chat.id, v, caption="–§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏
        if os.path.exists(REPORTS_FILE):
            with open(REPORTS_FILE, "rb") as r:
                bot.send_document(message.chat.id, r, caption="–§–∞–π–ª –æ—Ç—á–µ—Ç–æ–≤")
            
    except:
        pass

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "üëã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example)\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for file in [VOTES_FILE, REPORTS_FILE]:
        if not os.path.exists(file):
            with open(file, "w") as f:
                json.dump({} if file == VOTES_FILE else [], f)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
