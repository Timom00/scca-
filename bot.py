#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

from keep_alive import keep_alive
import telebot
import json
import re
import datetime
from telebot import types

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# üìÅ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤
REPORTS_FILE = "reports.json"
VOTES_FILE = "votes.json"

# ‚ùó –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∞–º–∞ (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –∫–æ–¥–µ)
SCAM_KEYWORDS = [
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "–±—ã—Å—Ç—Ä—ã–π –¥–æ—Ö–æ–¥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞",
    "100% –ø—Ä–∏–±—ã–ª—å", "–±–µ–∑ —Ä–∏—Å–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–∫–∞–º", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤–ª–æ–∂–µ–Ω–∏–µ", "–ª–µ–≥–∫–æ",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–æ—Ç–∑—ã–≤—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–∏–±—ã–ª—å", "–¥–æ—Ö–æ–¥", "–≤—ã–≤–æ–¥",
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "–∞–∫—Ü–∏—è", "–±–æ–Ω—É—Å", "–ø–ª–∞—Ç–∏—Ç", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–±–∏—Ç–∫–æ–∏–Ω",
    "–æ–±–º–∞–Ω", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø—Ä–∏–±—ã–ª—å —Å –Ω—É–ª—è", "—Å–¥–µ–ª–∞–π —Å–∞–º",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π", "—Ç–æ–∫–µ–Ω—ã", "—Ñ–æ—Ä–µ–∫—Å", "—Ä–æ–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å—É–ø–µ—Ä –¥–æ—Ö–æ–¥",
    "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "—Å–µ—Ç—å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–¥–æ—Ö–æ–¥ –¥–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
    "—Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞", "–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä", "–æ–±–µ—â–∞—é—Ç", "–±—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å",
    "—Ä–∞–±–æ—Ç–∞–π –¥–æ–º–∞", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥",
    "–¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞", "—Å—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å", "–ø–ª–∞—Ç–µ–∂–∏",
    "–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å 100%",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω—É–ª—è", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø—Ä–æ–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π", "—Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–≤—ã–ø–ª–∞—Ç—ã", "–ø—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", "–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—Ñ–µ–π–∫", "–æ–±–º–∞–Ω—É—Ç—å", "–≤–≤–æ–¥ –¥–µ–Ω–µ–≥", "–≤—ã–≤–æ–¥ –¥–µ–Ω–µ–≥", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞—Ñ–µ—Ä–∞", "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å—Ö–µ–º–∞", "–±—ã—Å—Ç—Ä—ã–π –æ–±–º–∞–Ω", "—Å–∫—Ä—ã—Ç—ã–π –æ–±–º–∞–Ω",
    "—Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ", "–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", "—Å–¥–µ–ª–∞–π –¥–µ–Ω—å–≥–∏",
    "–æ–±–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money",
    "scam", "fake", "fraud", "win", "winner", "lottery", "prize", "guaranteed",
    "profit", "cash", "deal", "limited offer", "click here", "subscribe",
    "easy money", "work from home", "passive income", "trading bot", "forex",
    "bitcoin", "token", "blockchain", "giveaway", "money back", "investment plan",
    "get rich", "income", "automatic profit", "high returns", "no risk",
    "double your money", "earnings", "make money", "quick cash", "fast profit",
    "financial freedom", "referral", "commission", "multilevel marketing",
    "pyramid scheme", "bonus code", "secret", "exclusive", "urgent", "risk free"
]

# =============================================
# –§–£–ù–ö–¶–ò–ò –ì–û–õ–û–°–û–í–ê–ù–ò–Ø
# =============================================
def load_json(file):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def init_votes_for_channel(channel_username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
        save_json(VOTES_FILE, votes)
    return votes[channel_username]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∏—Å—å

def update_vote(channel_username, user_id, vote_type):
    votes = load_json(VOTES_FILE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
    
    if user_id in votes[channel_username]["voters"]:
        return False

    if vote_type == "scam":
        votes[channel_username]["scam"] += 1
    else:
        votes[channel_username]["not_scam"] += 1
        
    votes[channel_username]["voters"].append(user_id)
    save_json(VOTES_FILE, votes)
    return True

def get_vote_stats(channel_username):
    """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    votes = load_json(VOTES_FILE)
    
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º
    if channel_username not in votes:
        init_votes_for_channel(channel_username)
        votes = load_json(VOTES_FILE)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    
    return votes[channel_username]["scam"], votes[channel_username]["not_scam"]
# =============================================

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∫–∞–º-–∫–ª—é—á–∏
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    return any(kw in text for kw in SCAM_KEYWORDS)

# üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞–º–Ω–æ—Å—Ç—å (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –∫–æ–¥–µ)
def check_url_scammy(url):
    scam_url_keywords = [
        "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money"
    ]
    if not url:
        return False
    url = url.lower()
    return any(kw in url for kw in scam_url_keywords)

# üìä –ü–û–õ–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –∫–æ–¥–µ)
def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –º–∞–ª–æ.")
            scam_score += 1
    except:
        pass

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    if contains_scam_keywords(chat.title):
        warnings.append("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    try:
        description = bot.get_chat(chat.id).description
        if description and contains_scam_keywords(description):
            warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 2
    except:
        pass

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link and check_url_scammy(invite_link):
            warnings.append("–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 1
    except:
        pass

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    try:
        if bot.get_chat(chat.id).photo is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            scam_score += 1
    except:
        pass

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if bot.get_chat(chat.id).pinned_message is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            scam_score += 1
    except:
        pass

    return warnings, scam_score

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
def save_report(report):
    try:
        with open(REPORTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(report)
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    try:
        with open("_655fbf78-b4c0-4ecc-81cc-e50ef3a8830f.jpeg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=("‚ú®" * 10 + "\n"
                         "         ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:         \n"
                         "-----------------------------------\n"
                         "üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–∫–∞–º\n"
                         "üëç –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∫–∞–Ω–∞–ª\n"
                         "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤\n"
                         "üõ° –ü–æ–º–æ–≥–∞—Ç—å –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                         "-----------------------------------\n"
                         "–û—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ!\n"
                         "–û—Ç–ø—Ä–∞–≤—å /status @username, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å!"),
                parse_mode="Markdown"
            )
    except Exception as e:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ @—Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    channel_tag = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–≥–∞
    if not re.match(r"^@[A-Za-z0-9_]{5,32}$", channel_tag):
        bot.reply_to(
            message,
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
        )
        return

    try:
        chat = bot.get_chat(channel_tag)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
        return

    # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
    warnings, scam_score = check_scam_factors(chat)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞
    channel_username = channel_tag[1:].lower()
    vote_record = init_votes_for_channel(channel_username)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä–¥–∏–∫—Ç
    if scam_score >= 3:
        verdict = "üö® –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞!"
    elif scam_score == 0:
        verdict = "‚úÖ –ö–∞–Ω–∞–ª –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
    else:
        verdict = "‚ö† –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report_lines = [verdict]
    
    if warnings:
        report_lines.append("\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        report_lines += [f"- {w}" for w in warnings]
    
    report_lines.append(f"\nüìä –°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}/7")
    report_lines.append(f"üö´ –ì–æ–ª–æ—Å–æ–≤ '–°–∫–∞–º': {vote_record['scam']}")
    report_lines.append(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–ù–µ —Å–∫–∞–º': {vote_record['not_scam']}")

    report_text = "\n".join(report_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    try:
        bot.reply_to(message, report_text, parse_mode="Markdown")
    except:
        pass

    # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_scam = types.InlineKeyboardButton(
        "üö´ –°–∫–∞–º", callback_data=f"vote_scam_{channel_username}")
    btn_not_scam = types.InlineKeyboardButton(
        "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam_{channel_username}")
    markup.add(btn_scam, btn_not_scam)
    
    bot.send_message(
        message.chat.id, 
        "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —ç—Ç–æ —Å–∫–∞–º?", 
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    save_report({
        "channel_tag": channel_tag,
        "check_date": datetime.datetime.utcnow().isoformat(),
        "scam_score": scam_score,
        "warnings": warnings,
        "user_id": message.from_user.id
    })

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def handle_vote(call):
    data = call.data.split("_")
    if len(data) < 3:
        bot.answer_callback_query(call.id, "‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return

    vote_type = data[1] 
    channel_username = "_".join(data[2:])
    user_id = call.from_user.id

    success = update_vote(channel_username, user_id, vote_type)
    if not success:
        bot.answer_callback_query(call.id, "‚ùó –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
        return

    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    scam_votes, not_scam_votes = get_vote_stats(channel_username)
    stat_text = (
        f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{channel_username}:\n"
        f"üö´ –°–∫–∞–º: {scam_votes}\n"
        f"‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton(
            "üö´ –°–∫–∞–º", callback_data=f"vote_scam_{channel_username}")
        btn_not_scam = types.InlineKeyboardButton(
            "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam_{channel_username}")
        markup.add(btn_scam, btn_not_scam)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=stat_text,
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"{stat_text}\n\n–û–±–Ω–æ–≤–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.")

# üìä –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=["status"])
def status_handler(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
        return

    channel_tag = parts[1]
    channel_username = channel_tag[1:].lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    scam_votes, not_scam_votes = get_vote_stats(channel_username)

    try:
        chat = bot.get_chat(channel_tag)
        title = chat.title
        channel_id = chat.id
        
        # –î–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–∞
        warnings, scam_score = check_scam_factors(chat)
    except:
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        channel_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        scam_score = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_tag}\n"
        f"üîñ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"üÜî ID: {channel_id}\n\n"
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        f"‚ö† –°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}/7\n\n"
        f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n"
        f"üö´ –ì–æ–ª–æ—Å–æ–≤ '–°–∫–∞–º': {scam_votes}\n"
        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–ù–µ —Å–∫–∞–º': {not_scam_votes}"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_scam = types.InlineKeyboardButton(
        "üö´ –°–∫–∞–º", callback_data=f"vote_scam_{channel_username}")
    btn_not_scam = types.InlineKeyboardButton(
        "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam_{channel_username}")
    markup.add(btn_scam, btn_not_scam)

    bot.reply_to(message, msg, reply_markup=markup, parse_mode="Markdown")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞ (@example) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    keep_alive()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
