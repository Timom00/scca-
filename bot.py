#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

import telebot
import json
import datetime
from telebot import types

# ‚úÖ –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Render ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
from keep_alive import keep_alive

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# üìÅ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤
REPORTS_FILE = "reports.json"
VOTES_FILE = "votes.json"

# ‚ùóÔ∏è –°–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º
SCAM_KEYWORDS = [
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast",
    "money", "scam", "fake", "click", "win"
]

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∫–∞–º-–∫–ª—é—á–∏
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    return any(kw in text for kw in SCAM_KEYWORDS)

# üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞–º–Ω–æ—Å—Ç—å
def check_url_scammy(url):
    if not url:
        return False
    url = url.lower()
    return any(kw in url for kw in SCAM_KEYWORDS)

# üìä –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –º–∞–ª–æ.")
            scam_score += 1
    except:
        pass

    if contains_scam_keywords(chat.title):
        warnings.append("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2

    try:
        description = bot.get_chat(chat.id).description
        if description and contains_scam_keywords(description):
            warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 2
    except:
        pass

    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link and check_url_scammy(invite_link):
            warnings.append("–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 1
    except:
        pass

    try:
        if bot.get_chat(chat.id).photo is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            scam_score += 1
    except:
        pass

    try:
        if bot.get_chat(chat.id).pinned_message is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            scam_score += 1
    except:
        pass

    return warnings, scam_score

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
def save_report(report):
    try:
        with open(REPORTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(report)
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
def save_vote(channel_tag, vote):
    try:
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            votes = json.load(f)
    except:
        votes = {}

    if channel_tag not in votes:
        votes[channel_tag] = {"scam": 0, "not_scam": 0}

    if vote == "scam":
        votes[channel_tag]["scam"] += 1
    elif vote == "not_scam":
        votes[channel_tag]["not_scam"] += 1

    with open(VOTES_FILE, "w", encoding="utf-8") as f:
        json.dump(votes, f, indent=4, ensure_ascii=False)

# üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ–ª–æ—Å–∞–º
def get_votes(channel_tag):
    try:
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            votes = json.load(f)
        return votes.get(channel_tag, {"scam": 0, "not_scam": 0})
    except:
        return {"scam": 0, "not_scam": 0}

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    try:
        with open("_655fbf78-b4c0-4ecc-81cc-e50ef3a8830f.jpeg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=("‚ú®" * 10 + "\n"
                         "         ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:*         \n"
                         "-----------------------------------\n"
                         "üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–∫–∞–º\n"
                         "üëç –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∫–∞–Ω–∞–ª\n"
                         "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤\n"
                         "üõ° –ü–æ–º–æ–≥–∞—Ç—å –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                         "-----------------------------------\n"
                         "–û—Ç–ø—Ä–∞–≤—å `@username` –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ!\n"
                         "–û—Ç–ø—Ä–∞–≤—å `/status @username`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å!"),
                parse_mode="Markdown"
            )
    except Exception as e:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ @—Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    channel_tag = message.text.strip()

    try:
        chat = bot.get_chat(channel_tag)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
        return

    warnings, scam_score = check_scam_factors(chat)

    report_lines = [
        f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_tag}",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}",
        f"ID: {chat.id}",
        f"–°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}",
        ""
    ]

    if warnings:
        report_lines.append("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        report_lines += [f" - {w}" for w in warnings]
    else:
        report_lines.append("‚úÖ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    report_text = "\n".join(report_lines)

    try:
        bot.reply_to(message, report_text)
    except:
        pass

    # üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    try:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üíÄ –°–∫–∞–º", callback_data=f"vote_scam|{channel_tag}"),
            types.InlineKeyboardButton("‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam|{channel_tag}")
        )
        bot.send_message(message.chat.id, "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —ç—Ç–æ —Å–∫–∞–º?", reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    save_report({
        "channel_tag": channel_tag,
        "check_date": datetime.datetime.utcnow().isoformat(),
        "scam_score": scam_score,
        "warnings": warnings,
        "user_id": message.from_user.id
    })

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def handle_vote(call):
    action, channel_tag = call.data.split("|")
    vote_type = "scam" if action == "vote_scam" else "not_scam"
    save_vote(channel_tag, vote_type)
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")

# üìä –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=["status"])
def status_handler(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
        return

    channel_tag = parts[1]
    votes = get_votes(channel_tag)

    try:
        chat = bot.get_chat(channel_tag)
        title = chat.title
        channel_id = chat.id
    except:
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        channel_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_tag}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"ID: {channel_id}\n\n"
        f"üíÄ –ì–æ–ª–æ—Å–æ–≤ '—Å–∫–∞–º': {votes['scam']}\n"
        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–Ω–µ —Å–∫–∞–º': {votes['not_scam']}"
    )

    bot.reply_to(message, msg)
# –ö–æ–º–∞–Ω–¥–∞ /export ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≥–æ–ª–æ—Å–∞–º–∏ –∏ –æ—Ç—á—ë—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@bot.message_handler(commands=["export"])
def export_handler(message):
    ADMIN_ID = 1465940524  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID (—á–∏—Å–ª–æ)
    
    if message.from_user.id == ADMIN_ID:
        try:
            with open("votes.json", "rb") as v:
                bot.send_document(message.chat.id, v, caption="üó≥ –ì–æ–ª–æ—Å–∞")
            with open("reports.json", "rb") as r:
                bot.send_document(message.chat.id, r, caption="üìã –û—Ç—á—ë—Ç—ã")
        except Exception as e:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã.")
    else:
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞ (@example) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    keep_alive()  # üü¢ –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
