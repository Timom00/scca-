#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

from keep_alive import keep_alive
import telebot
import json
import re
import datetime
from telebot import types
import os

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
ADMIN_ID = 1465940524
bot = telebot.TeleBot(TOKEN)

# üìÅ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SCAMLIST_FILE = "scamlist.json"
VOTES_FILE = "votes.json"
REPORTS_FILE = "reports.json"

# ‚ùó –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∞–º–∞
SCAM_KEYWORDS = [
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "–±—ã—Å—Ç—Ä—ã–π –¥–æ—Ö–æ–¥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞",
    "100% –ø—Ä–∏–±—ã–ª—å", "–±–µ–∑ —Ä–∏—Å–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–∫–∞–º", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤–ª–æ–∂–µ–Ω–∏–µ", "–ª–µ–≥–∫–æ",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–æ—Ç–∑—ã–≤—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–∏–±—ã–ª—å", "–¥–æ—Ö–æ–¥", "–≤—ã–≤–æ–¥",
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "–∞–∫—Ü–∏—è", "–±–æ–Ω—É—Å", "–ø–ª–∞—Ç–∏—Ç", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–±–∏—Ç–∫–æ–∏–Ω",
    "–æ–±–º–∞–Ω", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø—Ä–∏–±—ã–ª—å —Å –Ω—É–ª—è", "—Å–¥–µ–ª–∞–π —Å–∞–º",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π", "—Ç–æ–∫–µ–Ω—ã", "—Ñ–æ—Ä–µ–∫—Å", "—Ä–æ–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å—É–ø–µ—Ä –¥–æ—Ö–æ–¥",
    "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "—Å–µ—Ç—å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–¥–æ—Ö–æ–¥ –¥–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
    "—Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞", "–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä", "–æ–±–µ—â–∞—é—Ç", "–±—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å",
    "—Ä–∞–±–æ—Ç–∞–π –¥–æ–º–∞", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥",
    "–¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞", "—Å—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å", "–ø–ª–∞—Ç–µ–∂–∏",
    "–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å 100%",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω—É–ª—è", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø—Ä–æ–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π", "—Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–≤—ã–ø–ª–∞—Ç—ã", "–ø—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", "–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—Ñ–µ–π–∫", "–æ–±–º–∞–Ω—É—Ç—å", "–≤–≤–æ–¥ –¥–µ–Ω–µ–≥", "–≤—ã–≤–æ–¥ –¥–µ–Ω–µ–≥", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞—Ñ–µ—Ä–∞", "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å—Ö–µ–º–∞", "–±—ã—Å—Ç—Ä—ã–π –æ–±–º–∞–Ω", "—Å–∫—Ä—ã—Ç—ã–π –æ–±–º–∞–Ω",
    "—Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ", "–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", "—Å–¥–µ–ª–∞–π –¥–µ–Ω—å–≥–∏",
    "–æ–±–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–∫–æ–Ω—Ç–∞–∫—Ç", "–ø–∏—à–∏—Ç–µ", "direct", 
    "–ª–∏—á–∫–∞", "telegram.me", "whatsapp", "viber", "–ª–∏—á–Ω–æ", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ", 
    "–≥–∞—Ä–∞–Ω—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", "–æ—Ç–∑—ã–≤—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", 
    "—Ä–µ—Ñ–µ—Ä–∞–ª", "–ø–∞—Ä—Ç–Ω–µ—Ä", "–±–æ–Ω—É—Å", "–∞–∫—Ü–∏—è", "—Å–∫–∏–¥–∫–∞", "–ø—Ä–æ–º–æ–∫–æ–¥", 
    "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", "–ø–æ—Å–ª–µ–¥–Ω–∏–π", "—É—Å–ø–µ–π",
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money",
    "scam", "fake", "fraud", "win", "winner", "lottery", "prize", "guaranteed",
    "profit", "cash", "deal", "limited offer", "click here", "subscribe",
    "easy money", "work from home", "passive income", "trading bot", "forex",
    "bitcoin", "token", "blockchain", "giveaway", "money back", "investment plan",
    "get rich", "income", "automatic profit", "high returns", "no risk",
    "double your money", "earnings", "make money", "quick cash", "fast profit",
    "financial freedom", "referral", "commission", "multilevel marketing",
    "pyramid scheme", "bonus code", "secret", "exclusive", "urgent", "risk free"
]

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
SUSPICIOUS_DOMAINS = [
    "bit.ly", "t.me", "tinyurl.com", "cutt.ly", "shorte.st", "clck.ru",
    "cutt.us", "bc.vc", "adf.ly", "ouo.io", "shrinkme.io", "linkvertise.com",
    "shortconnect.com", "link.tl", "shorturl.at", "rebrand.ly"
]

# =============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# =============================================
def load_json(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if os.path.exists(file):
        try:
            with open(file, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_json(file, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª"""
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def init_votes_for_channel(channel_username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
        save_json(VOTES_FILE, votes)
    return votes[channel_username]

def update_vote(channel_username, user_id, vote_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    votes = load_json(VOTES_FILE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) in votes[channel_username]["voters"]:
        return False

    if vote_type == "scam":
        votes[channel_username]["scam"] += 1
    else:
        votes[channel_username]["not_scam"] += 1
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    votes[channel_username]["voters"].append(str(user_id))
    
    save_json(VOTES_FILE, votes)
    return True

def get_vote_stats(channel_username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤"""
    votes = load_json(VOTES_FILE)
    if channel_username in votes:
        return votes[channel_username]["scam"], votes[channel_username]["not_scam"]
    return 0, 0

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∫–∞–º-–∫–ª—é—á–∏
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    for kw in SCAM_KEYWORDS:
        if kw in text:
            return True
    return False

# üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞–º–Ω–æ—Å—Ç—å
def check_url_scammy(url):
    if not url:
        return False
    url = url.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    scam_url_keywords = [
        "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money"
    ]
    for kw in scam_url_keywords:
        if kw in url:
            return True
            
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    for domain in SUSPICIOUS_DOMAINS:
        if domain in url:
            return True
            
    return False

# üìä –ü–û–õ–ù–ê–Ø –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ù–ê–õ–ê
def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ.")
            scam_score += 1
        elif members_count > 100000 and members_count % 1000 == 0:
            warnings.append(f"–°–ª–∏—à–∫–æ–º —Ä–æ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({members_count}) ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –±–æ—Ç—ã.")
            scam_score += 1
    except Exception as e:
        warnings.append(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {str(e)}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    title = chat.title
    if contains_scam_keywords(title):
        warnings.append(f"–í –Ω–∞–∑–≤–∞–Ω–∏–∏ '{title}' –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    emoji_count = sum(1 for char in title if char in "üéâüöÄüî•üí∏üí∞üíµüíØüÜìü§ëüíé‚ú®üåüüìà")
    if emoji_count > 3:
        warnings.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ ({emoji_count}) ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.")
        scam_score += 1

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    try:
        description = bot.get_chat(chat.id).description
        if description:
            if contains_scam_keywords(description):
                warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
                scam_score += 2
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–∑–Ω–∞–∫ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤)
            if re.search(r"\b(–∫–æ–Ω—Ç–∞–∫—Ç|–ø–∏—à–∏—Ç–µ|direct|–ª–∏—á–∫–∞|@|telegram\.me|whatsapp|viber)\b", description, re.IGNORECASE):
                warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Å—è—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ ‚Äî —Ç–∏–ø–∏—á–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.")
                scam_score += 2
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            if re.search(r"\b(—Å—Ä–æ—á–Ω–æ|–±—ã—Å—Ç—Ä–æ|—É—Å–ø–µ–π|–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å|–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)\b", description, re.IGNORECASE):
                warnings.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç—å ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.")
                scam_score += 1
    except Exception as e:
        warnings.append(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: {str(e)}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link:
            if check_url_scammy(invite_link):
                warnings.append("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
                scam_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ URL
            if any(domain in invite_link for domain in SUSPICIOUS_DOMAINS):
                warnings.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π URL.")
                scam_score += 1
    except Exception as e:
        warnings.append(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {str(e)}")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    try:
        if bot.get_chat(chat.id).photo is None:
            warnings.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∞ ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            scam_score += 1
    except Exception as e:
        warnings.append(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {str(e)}")

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        pinned_msg = bot.get_chat(chat.id).pinned_message
        if pinned_msg is None:
            warnings.append("–ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –Ω–µ–æ–±—ã—á–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            scam_score += 1
        elif pinned_msg.text:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–∫–∞–º-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if contains_scam_keywords(pinned_msg.text):
                warnings.append("–í –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
                scam_score += 2
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—å–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏
            if re.search(r"\b(–ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ|–æ–ø–ª–∞—Ç–∏—Ç–µ|–∫—É–ø–∏—Ç–µ|–≤–∑–Ω–æ—Å|–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ)\b", pinned_msg.text, re.IGNORECASE):
                warnings.append("–í –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ—Å—è—Ç –¥–µ–Ω—å–≥–∏ ‚Äî —è–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ —Å–∫–∞–º–∞.")
                scam_score += 3
    except Exception as e:
        warnings.append(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    try:
        if hasattr(chat, 'date'):
            creation_date = datetime.datetime.fromtimestamp(chat.date)
            channel_age = (datetime.datetime.now() - creation_date).days
            
            if channel_age < 7:
                warnings.append(f"–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –æ—á–µ–Ω—å –Ω–µ–¥–∞–≤–Ω–æ ({channel_age} –¥–Ω–µ–π –Ω–∞–∑–∞–¥) ‚Äî –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫.")
                scam_score += 2
            elif channel_age < 30:
                warnings.append(f"–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ ({channel_age} –¥–Ω–µ–π –Ω–∞–∑–∞–¥) ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫.")
                scam_score += 1
    except:
        pass

    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫—Ä—ã—Ç—É—é —Ä–µ–∫–ª–∞–º—É
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        messages = bot.get_chat_history(chat.id, limit=5)
        scam_message_count = 0
        
        for msg in messages:
            if msg.text and contains_scam_keywords(msg.text):
                scam_message_count += 1
        
        if scam_message_count >= 3:
            warnings.append(f"–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ ({scam_message_count}/5).")
            scam_score += 2
    except:
        # –û–±—ã—á–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
        pass

    return warnings, scam_score

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
def save_report(report):
    try:
        with open(REPORTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(data, list):
            data = []
    except:
        data = []
    data.append(report)
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    try:
        with open("_655fbf78-b4c0-4ecc-81cc-e50ef3a8830f.jpeg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=(
                    "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®\n"
                    "         ü§ñ ScamDetector Bot         \n"
                    "-----------------------------------\n"
                    "‚ùó –í–∞–∂–Ω–æ:\n"
                    "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. "
                    "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!"
                    "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª—ã –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–∞–º–∞\n"
                    "üëç –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
                    "üõ° –ü–æ–º–æ–≥–∞—é –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                    "-----------------------------------\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∫–∞–Ω–∞–ª–∞!\n\n"
                    "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    "/status @–∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞\n"
                    "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                ),
                parse_mode="Markdown"
            )
    except Exception as e:
        bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å–∫–∞–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!")

# üìò –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def help_handler(message):
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n"
        "üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª:\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example)\n\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status @–∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ùó –í–∞–∂–Ω–æ:\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. "
        "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!"
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ @—Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    try:
        channel_tag = message.text.strip()
        
        if not re.match(r"^@[A-Za-z0-9_]{5,32}$", channel_tag):
            bot.reply_to(
                message,
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
            )
            return

        try:
            chat = bot.get_chat(channel_tag)
        except Exception as e:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ:\n- –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n- –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ\n- –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return

        warnings, scam_score = check_scam_factors(chat)
        
        channel_username = channel_tag[1:].lower()
        init_votes_for_channel(channel_username)
        scam_votes, not_scam_votes = get_vote_stats(channel_username)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if scam_score >= 8:
            verdict = "üö®üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö! –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞!"
            risk_emoji = "üî¥üî¥üî¥"
        elif scam_score >= 5:
            verdict = "‚ö†‚ö† –í–´–°–û–ö–ò–ô –†–ò–°–ö! –í–µ—Ä–æ—è—Ç–Ω–æ —Å–∫–∞–º!"
            risk_emoji = "üî¥üî¥"
        elif scam_score >= 3:
            verdict = "‚ö† –°–†–ï–î–ù–ò–ô –†–ò–°–ö! –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏!"
            risk_emoji = "üü†"
        elif scam_score > 0:
            verdict = "üü° –ù–ò–ó–ö–ò–ô –†–ò–°–ö! –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
            risk_emoji = "üü°"
        else:
            verdict = "‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ö–ê–ù–ê–õ! –†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã."
            risk_emoji = "üü¢"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            f"{risk_emoji} {verdict}",
            f"üîç –ö–∞–Ω–∞–ª: {channel_tag}",
            f"üìä –°–∫–∞–º-–∏–Ω–¥–µ–∫—Å: {scam_score}/10"
        ]
        
        if warnings:
            report_lines.append("\nüîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for i, warning in enumerate(warnings[:5], 1):
                report_lines.append(f"{i}. {warning}")
            if len(warnings) > 5:
                report_lines.append(f"üî∏ ...–∏ –µ—â–µ {len(warnings)-5} –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        
        report_lines.append("\nüë• –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:")
        report_lines.append(f"üö´ –°–∫–∞–º: {scam_votes}  |  ‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}")
        
        report_lines.append("\n‚ùó –í–∞–∂–Ω–æ: –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!")

        report_text = "\n".join(report_lines)

        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton(
            "üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
        btn_not_scam = types.InlineKeyboardButton(
            "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
        markup.add(btn_scam, btn_not_scam)
        
        bot.send_message(
            message.chat.id, 
            report_text,
            parse_mode="Markdown",
            reply_markup=markup
        )

        save_report({
            "channel_tag": channel_tag,
            "check_date": datetime.datetime.utcnow().isoformat(),
            "scam_score": scam_score,
            "warnings": warnings,
            "user_id": message.from_user.id
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_vote(call):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
        if '|' not in call.data:
            bot.answer_callback_query(call.id, "‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–∏–ø –≥–æ–ª–æ—Å–∞ –∏ username –∫–∞–Ω–∞–ª–∞
        vote_type, channel_username = call.data.split('|', 1)
        
        if vote_type not in ['scam', 'not_scam']:
            bot.answer_callback_query(call.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞.")
            return

        user_id = call.from_user.id

        success = update_vote(channel_username, user_id, vote_type)
        if not success:
            bot.answer_callback_query(call.id, "‚ùó –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
            return

        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
        
        scam_votes, not_scam_votes = get_vote_stats(channel_username)
        stat_text = (
            f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{channel_username}:\n"
            f"üö´ –°–∫–∞–º: {scam_votes}\n"
            f"‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}"
        )
        
        try:
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_scam = types.InlineKeyboardButton(
                "üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
            btn_not_scam = types.InlineKeyboardButton(
                "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
            markup.add(btn_scam, btn_not_scam)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=call.message.text + f"\n\n{stat_text}",
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            bot.send_message(call.message.chat.id, f"{stat_text}\n\n–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

# üìä –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=["status"])
def status_handler(message):
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[1].startswith("@"):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
            return

        channel_tag = parts[1]
        channel_username = channel_tag[1:].lower()
        
        scam_votes, not_scam_votes = get_vote_stats(channel_username)

        try:
            chat = bot.get_chat(channel_tag)
            title = chat.title
            channel_id = chat.id
            warnings, scam_score = check_scam_factors(chat)
        except Exception as e:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å @username.")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if scam_score >= 8:
            risk_level = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö üî¥üî¥üî¥"
        elif scam_score >= 5:
            risk_level = "–í–´–°–û–ö–ò–ô –†–ò–°–ö üî¥üî¥"
        elif scam_score >= 3:
            risk_level = "–°–†–ï–î–ù–ò–ô –†–ò–°–ö üü†"
        elif scam_score > 0:
            risk_level = "–ù–ò–ó–ö–ò–ô –†–ò–°–ö üü°"
        else:
            risk_level = "–ë–ï–ó–û–ü–ê–°–ù–´–ô üü¢"

        msg = (
            f"üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel_tag}\n"
            f"üîñ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üÜî ID: {channel_id}\n"
            f"üìà –°–∫–∞–º-–∏–Ω–¥–µ–∫—Å: {scam_score}/10\n"
            f"‚ö† –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã (–ø–µ—Ä–≤—ã–µ 3)
        if warnings:
            msg += f"\nüîé –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            for i, warning in enumerate(warnings[:3], 1):
                msg += f"‚ñ´ {warning}\n"
            if len(warnings) > 3:
                msg += f"‚ñ´ ...–∏ –µ—â–µ {len(warnings)-3} –ø—Ä–æ–±–ª–µ–º\n"
        
        msg += (
            f"\nüë• –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n"
            f"üö´ –°–∫–∞–º: {scam_votes}  |  ‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}\n\n"
            f"‚ùó –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –¢—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!"
        )

        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton(
            "üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
        btn_not_scam = types.InlineKeyboardButton(
            "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
        markup.add(btn_scam, btn_not_scam)

        bot.reply_to(message, msg, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üì§ –ö–æ–º–∞–Ω–¥–∞ /export (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(commands=["export"])
def export_handler(message):
    try:
        if message.from_user.id != ADMIN_ID:
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏
        if os.path.exists(VOTES_FILE):
            with open(VOTES_FILE, "rb") as v:
                bot.send_document(message.chat.id, v, caption="üó≥ –§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        else:
            bot.reply_to(message, "–§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏
        if os.path.exists(REPORTS_FILE):
            with open(REPORTS_FILE, "rb") as r:
                bot.send_document(message.chat.id, r, caption="üìã –§–∞–π–ª –æ—Ç—á–µ—Ç–æ–≤")
        else:
            bot.reply_to(message, "–§–∞–π–ª –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "üëã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example)\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.path.exists(VOTES_FILE):
        with open(VOTES_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
    
    if not os.path.exists(REPORTS_FILE):
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
    
    if not os.path.exists(SCAMLIST_FILE):
        with open(SCAMLIST_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
    
    keep_alive()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
