#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

from keep_alive import keep_alive
import telebot
from telebot import types
import json
import re
from datetime import datetime
import threading
import time

TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
ADMIN_ID = 1465940524
bot = telebot.TeleBot(TOKEN)

SCAMLIST_FILE = "scamlist.json"
VOTES_FILE = "votes.json"

SCAM_KEYWORDS = [
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏",
    "–±—ã—Å—Ç—Ä—ã–π –¥–æ—Ö–æ–¥",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–∫—Ä–∏–ø—Ç–∞",
    "100% –ø—Ä–∏–±—ã–ª—å",
    "–±–µ–∑ —Ä–∏—Å–∫–∞",
    "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥",
    "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–∫–∞–º",
    "–ª–æ—Ö–æ—Ç—Ä–æ–Ω",
    "–ø–∏—Ä–∞–º–∏–¥–∞",
    "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "–≤–ª–æ–∂–µ–Ω–∏–µ",
    "–ª–µ–≥–∫–æ",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞",
    "–æ—Ç–∑—ã–≤—ã",
    "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "–ø—Ä–∏–±—ã–ª—å",
    "–¥–æ—Ö–æ–¥",
    "–≤—ã–≤–æ–¥",
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞",
    "–∞–∫—Ü–∏—è",
    "–±–æ–Ω—É—Å",
    "–ø–ª–∞—Ç–∏—Ç",
    "—Ç–æ—Ä–≥–æ–≤–ª—è",
    "–±–∏—Ç–∫–æ–∏–Ω",
    "–æ–±–º–∞–Ω",
    "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç",
    "–º–æ—à–µ–Ω–Ω–∏–∫–∏",
    "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏",
    "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
    "–ø—Ä–∏–±—ã–ª—å —Å –Ω—É–ª—è",
    "—Å–¥–µ–ª–∞–π —Å–∞–º",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π",
    "—Ç–æ–∫–µ–Ω—ã",
    "—Ñ–æ—Ä–µ–∫—Å",
    "—Ä–æ–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏",
    "—Å—É–ø–µ—Ä –¥–æ—Ö–æ–¥",
    "–ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "–≥–∞—Ä–∞–Ω—Ç–∏—è",
    "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–µ—Ç—å",
    "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "–¥–æ—Ö–æ–¥ –¥–æ",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω",
    "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
    "—Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞",
    "–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä",
    "–æ–±–µ—â–∞—é—Ç",
    "–±—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å",
    "—Ä–∞–±–æ—Ç–∞–π –¥–æ–º–∞",
    "–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
    "—Ç—Ä–µ–π–¥–∏–Ω–≥",
    "–∑–∞—Ä–ø–ª–∞—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–∞–∫—Ü–∏–∏",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥",
    "–¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞",
    "—Å—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "–æ–Ω–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å",
    "–ø–ª–∞—Ç–µ–∂–∏",
    "–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
    "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥",
    "–ø—Ä–∏–±—ã–ª—å 100%",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω—É–ª—è",
    "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
    "–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞",
    "–ª–æ—Ö–æ—Ç—Ä–æ–Ω",
    "–ø—Ä–æ–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
    "—Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    "–¥–æ—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π",
    "–≤—ã–ø–ª–∞—Ç—ã",
    "–ø—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
    "–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏",
    "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç",
    "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—Ñ–µ–π–∫",
    "–æ–±–º–∞–Ω—É—Ç—å",
    "–≤–≤–æ–¥ –¥–µ–Ω–µ–≥",
    "–≤—ã–≤–æ–¥ –¥–µ–Ω–µ–≥",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞—Ñ–µ—Ä–∞",
    "–ø–∏—Ä–∞–º–∏–¥–∞",
    "—Å—Ö–µ–º–∞",
    "–±—ã—Å—Ç—Ä—ã–π –æ–±–º–∞–Ω",
    "—Å–∫—Ä—ã—Ç—ã–π –æ–±–º–∞–Ω",
    "—Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ",
    "–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏",
    "—Å–¥–µ–ª–∞–π –¥–µ–Ω—å–≥–∏",
    "–æ–±–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:
    "free",
    "bonus",
    "investment",
    "crypto",
    "earn",
    "quick",
    "fast",
    "money",
    "scam",
    "fake",
    "fraud",
    "win",
    "winner",
    "lottery",
    "prize",
    "guaranteed",
    "profit",
    "cash",
    "deal",
    "limited offer",
    "click here",
    "subscribe",
    "easy money",
    "work from home",
    "passive income",
    "trading bot",
    "forex",
    "bitcoin",
    "token",
    "blockchain",
    "giveaway",
    "money back",
    "investment plan",
    "get rich",
    "income",
    "automatic profit",
    "high returns",
    "no risk",
    "double your money",
    "earnings",
    "make money",
    "quick cash",
    "fast profit",
    "financial freedom",
    "referral",
    "commission",
    "multilevel marketing",
    "pyramid scheme",
    "bonus code",
    "secret",
    "exclusive",
    "urgent",
    "risk free"
]


def load_json(file):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}


def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    for kw in SCAM_KEYWORDS:
        if kw in text:
            return True
    return False


def check_url_scammy(url):
    scam_url_keywords = [
        "free", "bonus", "investment", "crypto", "earn", "quick", "fast",
        "money"
    ]
    if not url:
        return False
    url = url.lower()
    for kw in scam_url_keywords:
        if kw in url:
            return True
    return False


def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –º–∞–ª–æ.")
            scam_score += 1
    except Exception:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    if contains_scam_keywords(chat.title):
        warnings.append("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2

    try:
        description = bot.get_chat(chat.id).description
        if description and contains_scam_keywords(description):
            warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 2
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞–º
    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link and check_url_scammy(invite_link):
            warnings.append("–í —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 1
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    try:
        photos = bot.get_chat(chat.id).photo
        if photos is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            scam_score += 1
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        pinned_msg = bot.get_chat(chat.id).pinned_message
        if pinned_msg is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            scam_score += 1
    except Exception:
        pass

    return warnings, scam_score


def init_votes_for_channel(channel_username):
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}
        save_json(VOTES_FILE, votes)


def update_vote(channel_username, user_id, vote_type):
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        votes[channel_username] = {"scam": 0, "not_scam": 0, "voters": []}

    if user_id in votes[channel_username]["voters"]:
        return False

    if vote_type == "scam":
        votes[channel_username]["scam"] += 1
    else:
        votes[channel_username]["not_scam"] += 1
    votes[channel_username]["voters"].append(user_id)
    save_json(VOTES_FILE, votes)
    return True


def get_vote_stats(channel_username):
    votes = load_json(VOTES_FILE)
    if channel_username not in votes:
        return (0, 0)
    return votes[channel_username]["scam"], votes[channel_username]["not_scam"]


#
#@bot.message_handler(commands=["start"])
#def start(message):
#    welcome_text = ("‚ú®" * 10 + "\n"
#                    "         ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:*         \n"
#                    "-----------------------------------\n"
#                    "üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–∫–∞–º\n"
#                    "üëç –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∫–∞–Ω–∞–ª\n"
#                    "üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤\n"
#                    "üõ° –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
#                    "-----------------------------------\n"
#                    "–û—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ!")
#    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown")
#
@bot.message_handler(commands=["start"])
def start(message):
    img_path = "_655fbf78-b4c0-4ecc-81cc-e50ef3a8830f.jpeg"  # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    with open(img_path, "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=("‚ú®" * 10 + "\n"
                     "         ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:*         \n"
                     "-----------------------------------\n"
                     "üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–∫–∞–º\n"
                     "üëç –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∫–∞–Ω–∞–ª\n"
                     "üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤\n"
                     "üõ° –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                     "-----------------------------------\n"
                     "–û—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ!"
                     "–û—Ç–ø—Ä–∞–≤—å /status @username –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å!"
                    ))


import re


@bot.message_handler(func=lambda m: m.text is not None)
def handle_channel_or_invalid(message):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
    if not re.match(r"^@[A-Za-z0-9_]{5,32}$", text):
        bot.send_message(
            message.chat.id,
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
    channel_username = text[1:].lower()

    try:
        chat = bot.get_chat(text)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        return

    warnings, scam_score = check_scam_factors(chat)
    init_votes_for_channel(channel_username)

    if scam_score >= 3:
        verdict = "üö® –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞!"
    elif scam_score == 0:
        verdict = "‚úÖ –ö–∞–Ω–∞–ª –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
    else:
        verdict = "‚ö†Ô∏è –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."

    reply = f"{verdict}\n\n"
    if warnings:
        reply += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + "\n".join(f"- {w}"
                                              for w in warnings) + "\n\n"
    reply += "–ì–æ–ª–æ—Å—É–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º! \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ @username."

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_scam = types.InlineKeyboardButton(
        text="üö´ –°–∫–∞–º", callback_data=f"vote_scam_{channel_username}")
    btn_not_scam = types.InlineKeyboardButton(
        text="‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam_{channel_username}")
    markup.add(btn_scam, btn_not_scam)

    bot.send_message(message.chat.id, reply, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def handle_vote(call):
    data = call.data.split("_")
    if len(data) < 3:
        bot.answer_callback_query(call.id, "‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return

    vote_type = data[1]
    channel_username = "_".join(data[2:]).lower()
    user_id = call.from_user.id

    success = update_vote(channel_username, user_id, vote_type)
    if not success:
        bot.answer_callback_query(call.id, "‚ùó –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
        return

    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")

    scam_votes, not_scam_votes = get_vote_stats(channel_username)

    stat_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_username}:\n"
        f"üö´ –°–∫–∞–º: {scam_votes}\n"
        f"‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}\n\n"
        "üîç –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ @username.")

    bot.send_message(call.message.chat.id, stat_text)


@bot.message_handler(commands=["status"])
def status_command(message):
    args = message.text.strip().split()
    if len(args) != 2 or not args[1].startswith("@"):
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
        return

    channel_username = args[1][1:].lower()
    votes = load_json(VOTES_FILE)

    if channel_username not in votes:
        bot.send_message(message.chat.id, f"üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –∑–∞ @{channel_username}.")
        return

    scam = votes[channel_username].get("scam", 0)
    not_scam = votes[channel_username].get("not_scam", 0)

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ @{channel_username}:\n"
        f"üö´ –°–∫–∞–º: {scam}\n"
        f"‚úÖ –ù–µ —Å–∫–∞–º: {not_scam}"
    )
    bot.send_message(message.chat.id, response)


keep_alive()

bot.polling(none_stop=True)
