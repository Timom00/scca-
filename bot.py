#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

from keep_alive import keep_alive
import telebot
import json
import re
import datetime
from telebot import types
import os
import psycopg2
from psycopg2 import sql
import io

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"
ADMIN_ID = 1465940524
bot = telebot.TeleBot(TOKEN)

# ‚ùó –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∞–º–∞
SCAM_KEYWORDS = [
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "–±—ã—Å—Ç—Ä—ã–π –¥–æ—Ö–æ–¥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞",
    "100% –ø—Ä–∏–±—ã–ª—å", "–±–µ–∑ —Ä–∏—Å–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
    "—Å–∫–∞–º", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤–ª–æ–∂–µ–Ω–∏–µ", "–ª–µ–≥–∫–æ",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–æ—Ç–∑—ã–≤—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–∏–±—ã–ª—å", "–¥–æ—Ö–æ–¥", "–≤—ã–≤–æ–¥",
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "–∞–∫—Ü–∏—è", "–±–æ–Ω—É—Å", "–ø–ª–∞—Ç–∏—Ç", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–±–∏—Ç–∫–æ–∏–Ω",
    "–æ–±–º–∞–Ω", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø—Ä–∏–±—ã–ª—å —Å –Ω—É–ª—è", "—Å–¥–µ–ª–∞–π —Å–∞–º",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π", "—Ç–æ–∫–µ–Ω—ã", "—Ñ–æ—Ä–µ–∫—Å", "—Ä–æ–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å—É–ø–µ—Ä –¥–æ—Ö–æ–¥",
    "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "—Å–µ—Ç—å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–¥–æ—Ö–æ–¥ –¥–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
    "—Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞", "–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä", "–æ–±–µ—â–∞—é—Ç", "–±—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å",
    "—Ä–∞–±–æ—Ç–∞–π –¥–æ–º–∞", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥",
    "–¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∏—Å–∫–∞", "—Å—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å", "–ø–ª–∞—Ç–µ–∂–∏",
    "–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å 100%",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω—É–ª—è", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–ø—Ä–æ–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π", "—Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–≤—ã–ø–ª–∞—Ç—ã", "–ø—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", "–±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—Ñ–µ–π–∫", "–æ–±–º–∞–Ω—É—Ç—å", "–≤–≤–æ–¥ –¥–µ–Ω–µ–≥", "–≤—ã–≤–æ–¥ –¥–µ–Ω–µ–≥", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞—Ñ–µ—Ä–∞", "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å—Ö–µ–º–∞", "–±—ã—Å—Ç—Ä—ã–π –æ–±–º–∞–Ω", "—Å–∫—Ä—ã—Ç—ã–π –æ–±–º–∞–Ω",
    "—Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ", "–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", "—Å–¥–µ–ª–∞–π –¥–µ–Ω—å–≥–∏",
    "–æ–±–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money",
    "scam", "fake", "fraud", "win", "winner", "lottery", "prize", "guaranteed",
    "profit", "cash", "deal", "limited offer", "click here", "subscribe",
    "easy money", "work from home", "passive income", "trading bot", "forex",
    "bitcoin", "token", "blockchain", "giveaway", "money back", "investment plan",
    "get rich", "income", "automatic profit", "high returns", "no risk",
    "double your money", "earnings", "make money", "quick cash", "fast profit",
    "financial freedom", "referral", "commission", "multilevel marketing",
    "pyramid scheme", "bonus code", "secret", "exclusive", "urgent", "risk free"
]

# =============================================
# üóÑ –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° POSTGRESQL
# =============================================
class Database:
    def _init_(self):
        self.conn = psycopg2.connect(os.getenv('DATABASE_URL'), sslmode='require')
        self.create_tables()
    
    def create_tables(self):
        with self.conn.cursor() as cur:
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS votes (
                    id SERIAL PRIMARY KEY,
                    channel_username TEXT NOT NULL UNIQUE,
                    scam_votes INTEGER NOT NULL DEFAULT 0,
                    not_scam_votes INTEGER NOT NULL DEFAULT 0
                );
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cur.execute("""
                CREATE TABLE IF NOT EXISTS voters (
                    id SERIAL PRIMARY KEY,
                    vote_id INTEGER NOT NULL REFERENCES votes(id) ON DELETE CASCADE,
                    user_id BIGINT NOT NULL,
                    UNIQUE(vote_id, user_id)
                );
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS reports (
                    id SERIAL PRIMARY KEY,
                    channel_tag TEXT NOT NULL,
                    check_date TIMESTAMP NOT NULL,
                    scam_score INTEGER NOT NULL,
                    warnings JSONB NOT NULL,
                    user_id BIGINT NOT NULL
                );
            """)
            self.conn.commit()
    
    def init_votes_for_channel(self, channel_username):
        with self.conn.cursor() as cur:
            cur.execute("""
                INSERT INTO votes (channel_username) 
                VALUES (%s)
                ON CONFLICT (channel_username) DO NOTHING;
            """, (channel_username,))
            self.conn.commit()
    
    def update_vote(self, channel_username, user_id, vote_type):
        try:
            with self.conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                cur.execute("SELECT id FROM votes WHERE channel_username = %s", (channel_username,))
                vote_row = cur.fetchone()
                if not vote_row:
                    return False
                vote_id = vote_row[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ
                cur.execute("""
                    SELECT 1 FROM voters 
                    WHERE vote_id = %s AND user_id = %s
                """, (vote_id, user_id))
                if cur.fetchone():
                    return False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
                if vote_type == "scam":
                    cur.execute("""
                        UPDATE votes 
                        SET scam_votes = scam_votes + 1 
                        WHERE id = %s
                    """, (vote_id,))
                else:
                    cur.execute("""
                        UPDATE votes 
                        SET not_scam_votes = not_scam_votes + 1 
                        WHERE id = %s
                    """, (vote_id,))
                
                # –§–∏–∫—Å–∏—Ä—É–µ–º –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
                cur.execute("""
                    INSERT INTO voters (vote_id, user_id)
                    VALUES (%s, %s)
                    ON CONFLICT DO NOTHING
                """, (vote_id, user_id))
                
                self.conn.commit()
            return True
        except Exception as e:
            print(f"Database error: {e}")
            self.conn.rollback()
            return False
    
    def get_vote_stats(self, channel_username):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT scam_votes, not_scam_votes 
                FROM votes 
                WHERE channel_username = %s
            """, (channel_username,))
            result = cur.fetchone()
            return result or (0, 0)
    
    def save_report(self, report_data):
        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO reports (
                        channel_tag, check_date, scam_score, warnings, user_id
                    ) VALUES (%s, %s, %s, %s, %s)
                """, (
                    report_data['channel_tag'],
                    datetime.datetime.fromisoformat(report_data['check_date']),
                    report_data['scam_score'],
                    json.dumps(report_data['warnings']),
                    report_data['user_id']
                ))
                self.conn.commit()
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            self.conn.rollback()
            return False

    def export_votes(self):
        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        v.channel_username,
                        v.scam_votes,
                        v.not_scam_votes,
                        ARRAY_AGG(vr.user_id) AS voters
                    FROM votes v
                    LEFT JOIN voters vr ON vr.vote_id = v.id
                    GROUP BY v.id
                """)
                results = {}
                for row in cur.fetchall():
                    results[row[0]] = {
                        "scam": row[1],
                        "not_scam": row[2],
                        "voters": row[3] if row[3] else []
                    }
                return results
        except Exception as e:
            print(f"Error exporting votes: {e}")
            return {}

    def export_reports(self):
        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        id, channel_tag, check_date, 
                        scam_score, warnings, user_id 
                    FROM reports
                """)
                columns = [desc[0] for desc in cur.description]
                return [
                    dict(zip(columns, row)) 
                    for row in cur.fetchall()
                ]
        except Exception as e:
            print(f"Error exporting reports: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Database()
# =============================================

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∫–∞–º-–∫–ª—é—á–∏
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    for kw in SCAM_KEYWORDS:
        if kw in text:
            return True
    return False

# üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞–º–Ω–æ—Å—Ç—å
def check_url_scammy(url):
    scam_url_keywords = [
        "free", "bonus", "investment", "crypto", "earn", "quick", "fast", "money"
    ]
    if not url:
        return False
    url = url.lower()
    for kw in scam_url_keywords:
        if kw in url:
            return True
    return False

# üìä –ü–û–õ–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
def check_scam_factors(chat):
    warnings = []
    scam_score = 0

    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –º–∞–ª–æ.")
            scam_score += 1
    except:
        pass

    if contains_scam_keywords(chat.title):
        warnings.append("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2

    try:
        description = bot.get_chat(chat.id).description
        if description and contains_scam_keywords(description):
            warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 2
    except:
        pass

    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link and check_url_scammy(invite_link):
            warnings.append("–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 1
    except:
        pass

    try:
        if bot.get_chat(chat.id).photo is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            scam_score += 1
    except:
        pass

    try:
        if bot.get_chat(chat.id).pinned_message is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            scam_score += 1
    except:
        pass

    return warnings, scam_score

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    try:
        with open("_655fbf78-b4c0-4ecc-81cc-e50ef3a8830f.jpeg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=(
                     "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®\n"
                    "         ü§ñ ScamDetector Bot         \n"
                    "-----------------------------------\n"
                    "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª—ã –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–∞–º–∞\n"
                    "üëç –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
                    "üõ° –ü–æ–º–æ–≥–∞—é –∏–∑–±–µ–≥–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                    "-----------------------------------\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∫–∞–Ω–∞–ª–∞!\n\n"
                    "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    "/status @–∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞\n"
                    "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
                     "-----------------------------------\n"
                    "‚ùó –í–∞–∂–Ω–æ:\n"
                    "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. "
                    "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!"
                )
            )
    except Exception as e:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")

# üìò –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def help_handler(message):
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n"
        "üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª:\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example)\n\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status @–∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ùó –í–∞–∂–Ω–æ:\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. "
        "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!"
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ @—Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    channel_tag = message.text.strip()
    
    if not re.match(r"^@[A-Za-z0-9_]{5,32}$", channel_tag):
        bot.reply_to(
            message,
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
        )
        return

    try:
        chat = bot.get_chat(channel_tag)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
        return

    warnings, scam_score = check_scam_factors(chat)
    
    channel_username = channel_tag[1:].lower()
    db.init_votes_for_channel(channel_username)
    scam_votes, not_scam_votes = db.get_vote_stats(channel_username)

    if scam_score >= 3:
        verdict = "üö® –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞!"
    elif scam_score == 0:
        verdict = "‚úÖ –ö–∞–Ω–∞–ª –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
    else:
        verdict = "‚ö† –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."

    report_lines = [verdict]
    
    if warnings:
        report_lines.append("\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        report_lines += [f"- {w}" for w in warnings]
    
    report_lines.append(f"\nüìä –°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}/7")
    report_lines.append(f"üö´ –ì–æ–ª–æ—Å–æ–≤ '–°–∫–∞–º': {scam_votes}")
    report_lines.append(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–ù–µ —Å–∫–∞–º': {not_scam_votes}")

    report_text = "\n".join(report_lines)

    bot.reply_to(message, report_text)

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_scam = types.InlineKeyboardButton(
        "üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
    btn_not_scam = types.InlineKeyboardButton(
        "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
    markup.add(btn_scam, btn_not_scam)
    
    bot.send_message(
        message.chat.id, 
        "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —ç—Ç–æ —Å–∫–∞–º?", 
        reply_markup=markup
    )

    db.save_report({
        "channel_tag": channel_tag,
        "check_date": datetime.datetime.utcnow().isoformat(),
        "scam_score": scam_score,
        "warnings": warnings,
        "user_id": message.from_user.id
    })

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_vote(call):
    if '|' not in call.data:
        bot.answer_callback_query(call.id, "‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return
        
    vote_type, channel_username = call.data.split('|', 1)
    
    if vote_type not in ['scam', 'not_scam']:
        bot.answer_callback_query(call.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞.")
        return

    user_id = call.from_user.id
    success = db.update_vote(channel_username, user_id, vote_type)
    
    if not success:
        bot.answer_callback_query(call.id, "‚ùó –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
        return

    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")
    
    scam_votes, not_scam_votes = db.get_vote_stats(channel_username)
    stat_text = (
        f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{channel_username}:\n"
        f"üö´ –°–∫–∞–º: {scam_votes}\n"
        f"‚úÖ –ù–µ —Å–∫–∞–º: {not_scam_votes}"
    )
    
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_scam = types.InlineKeyboardButton(
            "üö´ –°–∫–∞–º", callback_data=f"scam|{channel_username}")
        btn_not_scam = types.InlineKeyboardButton(
            "‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"not_scam|{channel_username}")
        markup.add(btn_scam, btn_not_scam)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=stat_text,
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"{stat_text}\n\n–û–±–Ω–æ–≤–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.", reply_markup=markup)

# üìä –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=["status"])
def status_handler(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
        return

    channel_tag = parts[1]
    channel_username = channel_tag[1:].lower()
    
    scam_votes, not_scam_votes = db.get_vote_stats(channel_username)

    try:
        chat = bot.get_chat(channel_tag)
        title = chat.title
        channel_id = chat.id
        warnings, scam_score = check_scam_factors(chat)
    except Exception as e:
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        channel_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        scam_score = 0
        warnings = []

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_tag}\n"
        f"üîñ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"üÜî ID: {channel_id}\n\n"
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        f"‚ö† –°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}/7\n\n"
        f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n"
        f"üö´ –ì–æ–ª–æ—Å–æ–≤ '–°–∫–∞–º': {scam_votes}\n"
        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–ù–µ —Å–∫–∞–º': {not_scam_votes}"
    )

    bot.reply_to(message, msg)

# üì§ –ö–æ–º–∞–Ω–¥–∞ /export (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(commands=["export"])
def export_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        votes_data = db.export_votes()
        reports_data = db.export_reports()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏
        votes_json = json.dumps(votes_data, ensure_ascii=False, indent=2).encode('utf-8')
        reports_json = json.dumps(reports_data, ensure_ascii=False, indent=2, default=str).encode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        bot.send_document(
            message.chat.id, 
            ('votes.json', io.BytesIO(votes_json)),
            caption="üó≥ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ–ª–æ—Å–æ–≤"
        )
        
        bot.send_document(
            message.chat.id, 
            ('reports.json', io.BytesIO(reports_json)),
            caption="üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"
        )
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞ (@example) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    keep_alive()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PostgreSQL...")
    bot.infinity_polling()
