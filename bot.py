#7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U
#1465940524

import telebot
import json
import datetime

TOKEN = "7660678589:AAG5Bo3rAodVO_YiHs4f6jPniKQt8ZBVU1U"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤
REPORTS_FILE = "reports.json"
VOTES_FILE = "votes.json"

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º
SCAM_KEYWORDS = [
    "free", "bonus", "investment", "crypto", "earn", "quick", "fast",
    "money", "scam", "fake", "click", "win"
]

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
def contains_scam_keywords(text):
    if not text:
        return False
    text = text.lower()
    return any(kw in text for kw in SCAM_KEYWORDS)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Å—ã–ª–∫–µ
def check_url_scammy(url):
    if not url:
        return False
    url = url.lower()
    return any(kw in url for kw in SCAM_KEYWORDS)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–∞–ª–∞
def check_scam_factors(chat):
    warnings = []   # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    scam_score = 0  # –û–±—â–∏–π –±–∞–ª–ª

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        members_count = bot.get_chat_members_count(chat.id)
        if members_count < 50:
            warnings.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—Å–µ–≥–æ {members_count} ‚Äî –º–∞–ª–æ.")
            scam_score += 1
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    if contains_scam_keywords(chat.title):
        warnings.append("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
        scam_score += 2

    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    try:
        description = bot.get_chat(chat.id).description
        if description and contains_scam_keywords(description):
            warnings.append("–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 2
    except:
        pass

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        invite_link = bot.export_chat_invite_link(chat.id)
        if invite_link and check_url_scammy(invite_link):
            warnings.append("–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")
            scam_score += 1
    except:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
    try:
        if bot.get_chat(chat.id).photo is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            scam_score += 1
    except:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if bot.get_chat(chat.id).pinned_message is None:
            warnings.append("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            scam_score += 1
    except:
        pass

    return warnings, scam_score

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ reports.json
def save_report(report):
    try:
        with open(REPORTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    data.append(report)

    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
def save_vote(channel_tag, vote):
    try:
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            votes = json.load(f)
    except:
        votes = {}

    if channel_tag not in votes:
        votes[channel_tag] = {"scam": 0, "not_scam": 0}

    if vote == "scam":
        votes[channel_tag]["scam"] += 1
    elif vote == "not_scam":
        votes[channel_tag]["not_scam"] += 1

    with open(VOTES_FILE, "w", encoding="utf-8") as f:
        json.dump(votes, f, indent=4, ensure_ascii=False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞–Ω–∞–ª—É
def get_votes(channel_tag):
    try:
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            votes = json.load(f)
        return votes.get(channel_tag, {"scam": 0, "not_scam": 0})
    except:
        return {"scam": 0, "not_scam": 0}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞ (@example), —á—Ç–æ–±—ã —è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞ —Å–∫–∞–º. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ —Ç–µ–≥—É (@)
@bot.message_handler(func=lambda m: m.text and m.text.startswith("@"))
def channel_check_handler(message):
    channel_tag = message.text.strip()

    try:
        chat = bot.get_chat(channel_tag)
    except Exception:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.")
        return

    warnings, scam_score = check_scam_factors(chat)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    report_lines = [
        f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_tag}",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}",
        f"ID: {chat.id}",
        f"–°–∫–∞–º-–±–∞–ª–ª—ã: {scam_score}",
        ""
    ]

    if warnings:
        report_lines.append("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        report_lines += [f" - {w}" for w in warnings]
    else:
        report_lines.append("‚úÖ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    report_text = "\n".join(report_lines)
    bot.reply_to(message, report_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    save_report({
        "channel_tag": channel_tag,
        "check_date": datetime.datetime.utcnow().isoformat(),
        "scam_score": scam_score,
        "warnings": warnings,
        "user_id": message.from_user.id
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üíÄ –°–∫–∞–º", callback_data=f"vote_scam|{channel_tag}"),
        telebot.types.InlineKeyboardButton("‚úÖ –ù–µ —Å–∫–∞–º", callback_data=f"vote_not_scam|{channel_tag}")
    )
    bot.send_message(message.chat.id, "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —ç—Ç–æ —Å–∫–∞–º?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def handle_vote(call):
    action, channel_tag = call.data.split("|")
    vote_type = "scam" if action == "vote_scam" else "not_scam"
    save_vote(channel_tag, vote_type)
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!")

# –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞–Ω–∞–ª—É
@bot.message_handler(commands=["status"])
def status_handler(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /status @–∫–∞–Ω–∞–ª")
        return

    channel_tag = parts[1]
    votes = get_votes(channel_tag)

    try:
        chat = bot.get_chat(channel_tag)
        title = chat.title
        channel_id = chat.id
    except:
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        channel_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_tag}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"ID: {channel_id}\n\n"
        f"üíÄ –ì–æ–ª–æ—Å–æ–≤ '—Å–∫–∞–º': {votes['scam']}\n"
        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤ '–Ω–µ —Å–∫–∞–º': {votes['not_scam']}"
    )

    bot.reply_to(message, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞ (@example) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
